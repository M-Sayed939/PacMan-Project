Index: src/Project/Maps/Map5/Map5Listener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Project.Maps.Map5;\r\n\r\nimport Project.Core.AnimListener;\r\nimport Project.Core.texture.TextureReader;\r\nimport Project.Models.Directions;\r\nimport Project.Models.Eating;\r\nimport Project.Models.Ghost;\r\nimport Project.Models.Pacman;\r\nimport Project.Pages.GameOver;\r\nimport Project.Pages.WinnerPage;\r\n\r\nimport javax.media.opengl.GL;\r\nimport javax.media.opengl.GLAutoDrawable;\r\nimport javax.media.opengl.GLException;\r\nimport javax.media.opengl.glu.GLU;\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.BitSet;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.swing.*;\r\n\r\nimport static Project.Core.Utils.*;\r\nimport static java.awt.event.KeyEvent.*;\r\nimport static java.awt.event.KeyEvent.VK_LEFT;\r\n\r\n\r\npublic class Map5Listener extends AnimListener {\r\n    JFrame frame = null;\r\n    Pacman pacman = new Pacman();\r\n    ArrayList<Eating> eating = new ArrayList<>();\r\n\r\n    ArrayList<Ghost> ghosts = new ArrayList<>();\r\n    static int GHOSTS_SIZE = 4;\r\n    Clip eatingSound;\r\n    static final int MAX_X = 350;\r\n    static final int MAX_Y = 250;\r\n    int cntFood;\r\n    int cntLives = 3;\r\n    int time;\r\n    Timer timer = new Timer(1000, e -> {\r\n        time++;\r\n    });\r\n\r\n    String textureNames[] = {\"images.png\",\"pacman.png\",\"up.gif\",\"down.gif\",\"right.gif\",\"left.gif\",\"ghost.gif\",\"food.png\",\"food2.png\"};\r\n    TextureReader.Texture texture[] = new TextureReader.Texture[textureNames.length];\r\n    int textures[] = new int[textureNames.length];\r\n\r\n    int[][] map = new int[][]{\r\n            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},\r\n            {0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0},\r\n            {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},\r\n            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\r\n    };\r\n    int row = map.length;\r\n    int col = map[0].length;\r\n    int animIndexForPacman = 1;\r\n    int animIndexForFood = 8;\r\n\r\n    public void init(GLAutoDrawable gld) {\r\n\r\n        GL gl = gld.getGL();\r\n\r\n        gl.glClearColor(0, 0, 0, 1f);\r\n\r\n        {\r\n            gl.glEnable(GL.GL_TEXTURE_2D);  // Enable Texture Mapping\r\n            gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);\r\n            gl.glGenTextures(textureNames.length, textures, 0);\r\n\r\n            for (int i = 0; i < textureNames.length; i++) {\r\n                try {\r\n                    texture[i] = TextureReader.readTexture(assetsFolderName + \"//\" + textureNames[i], true);\r\n                    gl.glBindTexture(GL.GL_TEXTURE_2D, textures[i]);\r\n\r\n                    new GLU().gluBuild2DMipmaps(\r\n                            GL.GL_TEXTURE_2D,\r\n                            GL.GL_RGBA, // Internal Texel Format,\r\n                            texture[i].getWidth(), texture[i].getHeight(),\r\n                            GL.GL_RGBA, // External format from image,\r\n                            GL.GL_UNSIGNED_BYTE,\r\n                            texture[i].getPixels() // Image data\r\n                    );\r\n                } catch (IOException e) {\r\n                    System.out.println(e.getMessage());\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n\r\n        gl.glMatrixMode(GL.GL_PROJECTION);\r\n        gl.glLoadIdentity();\r\n\r\n        gl.glOrtho(0, MAX_X, MAX_Y, 0, 0, 1.0);\r\n\r\n        fillEating();\r\n\r\n        addGhostsToArray();\r\n        for (Ghost g : ghosts) {\r\n            g.randMove();\r\n        }\r\n        timer.start();\r\n    }\r\n\r\n    private void addGhostsToArray() {\r\n        for (int i = 0; i < GHOSTS_SIZE; i++) {\r\n            ghosts.add(new Ghost(150,150));\r\n        }\r\n    }\r\n\r\n    private void fillEating() {\r\n        for (int i = 0; i < row; i++) {\r\n            for (int j = 0; j < col; j++) {\r\n                if (i % 2 == 0 && j % 3 == 0)\r\n                    if (map[i][j] == 1) { // eat\r\n                        eating.add(new Eating(j, i));\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void display(GLAutoDrawable gld) {\r\n        GL gl = gld.getGL();\r\n        gl.glClear(GL.GL_COLOR_BUFFER_BIT);\r\n\r\n        gl.glPushMatrix();\r\n        int move = 10;\r\n        gl.glTranslated(move, move, 0);\r\n        {\r\n            drawBackground(gl);\r\n        }\r\n        gl.glPopMatrix();\r\n\r\n        gl.glPushMatrix();\r\n        double f =0.967;\r\n        double d =10;\r\n        gl.glTranslated(d+0.3,d-0.5,1);\r\n        gl.glScaled(f,f,1);\r\n        {\r\n            drawEating(gl);\r\n            drawPacman(gl);\r\n            drawGhost(gl);\r\n        }\r\n        gl.glPopMatrix();\r\n\r\n        handelPacmanMove();\r\n        handelPacmanEating();\r\n        handelGhostMove();\r\n        handelLose();\r\n        handelWinning();\r\n\r\n        try {\r\n            drawString(gl, 15, MAX_Y -230, \"Score: \" + cntFood);  // Score\r\n            drawString(gl, 70, MAX_Y -230, \"Lives: \" + cntLives); // Lives\r\n            drawString(gl, 125, MAX_Y -230, \"Time: \" + time); // Time\r\n        } catch (GLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void handelLose() {\r\n        for (Ghost g : ghosts) {\r\n            if (g.ii == pacman.ii && g.jj == pacman.jj) {\r\n                if (eatingSound != null) eatingSound.stop();\r\n                if (--cntLives == 0) {\r\n                    frame.dispose();\r\n                    new GameOver().setVisible(true);\r\n                } else {\r\n                    pacman.reset();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private void handelGhostMove() {\r\n        for (Ghost g : ghosts) {\r\n            switch (g.direction) {\r\n                case IDEAL -> {\r\n                }\r\n                case UP -> {\r\n                    if (g.y - g.step < 0 || g.jj - 1 < 0 || map[g.jj - 1][g.ii] == 0) {\r\n                        g.randMove();\r\n                        return;\r\n                    }\r\n                    g.moveUP();\r\n                }\r\n                case DOWN -> {\r\n                    if (g.y + g.step > MAX_Y || g.jj + 1 >= row || map[g.jj + 1][g.ii] == 0) {\r\n                        g.randMove();\r\n                        return;\r\n                    }\r\n                    g.moveDown();\r\n                }\r\n                case RIGHT -> {\r\n                    if (g.x + g.step > MAX_X || g.ii + 1 >= col || map[g.jj][g.ii + 1] == 0) {\r\n                        g.randMove();\r\n                        return;\r\n                    }\r\n                    g.moveRight();\r\n                }\r\n                case LEFT -> {\r\n                    if (g.x - g.step < 0 || g.ii - 1 < 0 || map[g.jj][g.ii - 1] == 0) {\r\n                        g.randMove();\r\n                        return;\r\n                    }\r\n                    g.moveLeft();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void drawGhost(GL gl) {\r\n        for (Ghost g : ghosts) {\r\n            DrawSprite(gl, (int) g.x, (int) g.y, 6, textures, 10);\r\n        }\r\n    }\r\n\r\n    private void handelWinning() {\r\n        if (eating.isEmpty()) { // Winning\r\n            System.out.println(\"Win\");\r\n            if (eatingSound != null) eatingSound.stop();\r\n            frame.dispose();\r\n            new WinnerPage().setVisible(true);\r\n        }\r\n        }\r\n\r\n    private void handelPacmanEating() {\r\n\r\n        for (int i = 0; i < eating.size(); i++) {\r\n            if (pacman.ii == eating.get(i).ii && pacman.jj == eating.get(i).jj) {\r\n//                System.out.println(i);\r\n                cntFood++;\r\n                if (eatingSound == null || !eatingSound.isRunning()) {\r\n                    eatingSound = playMusic(\"src/Project/Assets/pacman-wakawaka.wav\", false);\r\n                }\r\n                eating.remove(i--);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handelPacmanMove() {\r\n        if (isKeyPressed(VK_UP)) {\r\n            pacman.direction = Directions.UP;\r\n        }\r\n        if (isKeyPressed(VK_DOWN)) {\r\n            pacman.direction = Directions.DOWN;\r\n        }\r\n        if (isKeyPressed(VK_RIGHT)) {\r\n            pacman.direction = Directions.RIGHT;\r\n        }\r\n        if (isKeyPressed(VK_LEFT)) {\r\n            pacman.direction = Directions.LEFT;\r\n        }\r\n        if (!(isKeyPressed(VK_UP) || isKeyPressed(VK_DOWN) || isKeyPressed(VK_RIGHT) || isKeyPressed(VK_LEFT))) {\r\n            pacman.direction = Directions.IDEAL;\r\n        }\r\n\r\n        switch (pacman.direction) {\r\n            case IDEAL -> {\r\n            }\r\n            case UP -> {\r\n                if (pacman.y - pacman.step < 0 || pacman.jj - 1 < 0 || map[pacman.jj - 1][pacman.ii] == 0) return;\r\n                pacman.moveUP();\r\n            }\r\n            case DOWN -> {\r\n                if (pacman.y + pacman.step > MAX_Y || pacman.jj + 1 >= row || map[pacman.jj + 1][pacman.ii] == 0)\r\n                    return;\r\n                pacman.moveDown();\r\n            }\r\n            case RIGHT -> {\r\n                if (pacman.x + pacman.step > MAX_X || pacman.ii + 1 >= col || map[pacman.jj][pacman.ii + 1] == 0)\r\n                    return;\r\n                pacman.moveRight();\r\n            }\r\n            case LEFT -> {\r\n                if (pacman.x - pacman.step < 0 || pacman.ii - 1 < 0 || map[pacman.jj][pacman.ii - 1] == 0) return;\r\n                pacman.moveLeft();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void drawEating(GL gl) {\r\n        for (Eating e : eating) {\r\n            DrawSprite(gl, (int) e.x, (int) e.y, animIndexForFood,textures,10);\r\n        }\r\n    }\r\n\r\n    private void drawPacman(GL gl) {\r\n        changeAnimIndex();\r\n        DrawSprite(gl, (int) pacman.x, (int) pacman.y, animIndexForPacman,textures,10);\r\n    }\r\n\r\n    private void changeAnimIndex() {\r\n        switch (pacman.direction){\r\n            case IDEAL -> {\r\n                animIndexForPacman = 1;\r\n            }\r\n            case UP -> {\r\n                if(animIndexForPacman == 1)\r\n                    animIndexForPacman = 2;\r\n                else if(animIndexForPacman == 2);\r\n                    animIndexForPacman = 1;\r\n            }\r\n            case DOWN -> {\r\n                if(animIndexForPacman == 1)\r\n                    animIndexForPacman = 3;\r\n                else if(animIndexForPacman == 3)\r\n                    animIndexForPacman = 1;\r\n            }\r\n            case RIGHT -> {\r\n                if(animIndexForPacman == 1)\r\n                    animIndexForPacman = 4;\r\n                else if(animIndexForPacman == 4)\r\n                    animIndexForPacman = 1;\r\n            }\r\n            case LEFT -> {\r\n                if(animIndexForPacman == 1)\r\n                    animIndexForPacman = 5;\r\n                else if(animIndexForPacman == 5)\r\n                    animIndexForPacman = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void drawBackground(GL gl) {\r\n        DrawSprite2(gl, 0, 0, 0, textures, MAX_X,MAX_Y);\r\n    }\r\n\r\n\r\n    public BitSet keyBits = new BitSet(256);\r\n\r\n    @Override\r\n    public void keyPressed(final KeyEvent event) {\r\n        int keyCode = event.getKeyCode();\r\n        keyBits.set(keyCode);\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(final KeyEvent event) {\r\n        int keyCode = event.getKeyCode();\r\n        keyBits.clear(keyCode);\r\n        switch (keyCode) {\r\n            case VK_UP, VK_DOWN, VK_RIGHT, VK_LEFT -> pacman.direction = Directions.IDEAL;\r\n        }\r\n    }\r\n\r\n    public boolean isKeyPressed(final int keyCode) {\r\n        return keyBits.get(keyCode);\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void reshape(GLAutoDrawable glAutoDrawable, int i, int i1, int i2, int i3) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void displayChanged(GLAutoDrawable glAutoDrawable, boolean b, boolean b1) {\r\n\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/Project/Maps/Map5/Map5Listener.java b/src/Project/Maps/Map5/Map5Listener.java
--- a/src/Project/Maps/Map5/Map5Listener.java	
+++ b/src/Project/Maps/Map5/Map5Listener.java	
@@ -1,14 +1,13 @@
 package Project.Maps.Map5;
 
-import Project.Core.AnimListener;
+import Project.Core.*;
 import Project.Core.texture.TextureReader;
-import Project.Models.Directions;
-import Project.Models.Eating;
-import Project.Models.Ghost;
-import Project.Models.Pacman;
+import Project.Models.*;
 import Project.Pages.GameOver;
 import Project.Pages.WinnerPage;
 
+import Project.*;
+
 import javax.media.opengl.GL;
 import javax.media.opengl.GLAutoDrawable;
 import javax.media.opengl.GLException;
@@ -20,6 +19,7 @@
 import javax.sound.sampled.Clip;
 import javax.swing.*;
 
+
 import static Project.Core.Utils.*;
 import static java.awt.event.KeyEvent.*;
 import static java.awt.event.KeyEvent.VK_LEFT;
